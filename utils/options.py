import argparseimport torchdef args_parser():    parser = argparse.ArgumentParser()    parser.add_argument('--algorithm', type=str, default='fedavg', help="name of algorithm")    parser.add_argument('--dataset', type=str, default='cifar10', help="name of dataset")    parser.add_argument('--model', type=str, default='resnet', help='model name')    parser.add_argument('--epochs', type=int, default=1000, help="rounds of training")    parser.add_argument('--num_users', type=int, default=100, help="number of users: K")    parser.add_argument('--frac', type=float, default=0.1, help="the fraction of clients: C")    parser.add_argument('--local_ep', type=int, default=5, help="the number of local epochs: E")    parser.add_argument('--local_bs', type=int, default=10, help="local batch size: B")    parser.add_argument('--bs', type=int, default=128, help="test batch size")    parser.add_argument('--lr', type=float, default=0.01, help="learning rate")    parser.add_argument('--momentum', type=float, default=0.5, help="SGD momentum (default: 0.5)")    parser.add_argument('--weight_decay', type=float, default=1e-3, help="weight_decay")    parser.add_argument('--num_classes', type=int, default=10, help="number of classes")    parser.add_argument('--num_channels', type=int, default=3, help="number of channels of images")    parser.add_argument('--seed', type=int, default=0, help="random seed")    parser.add_argument('--gpu', type=int, default=0, help="GPU ID, -1 for CPU")    args = parser.parse_args()    args.device = torch.device('cuda:{}'.format(args.gpu) if torch.cuda.is_available() and args.gpu != -1 else 'cpu')    return args